<?php	session_start();	ini_set("display_startup_errors", "on");	ini_set("display_errors", "on");	error_reporting(E_ALL);	//include the classes and the database	include_once('db.php');	//get all of the requied 	$keyword = trim(strtolower($_GET['keyword']));	$type 			= "Title";	$keywords 		= explode(" ", $keyword);			$packageId 		= $_GET['packageId'];	$isnew 			= $_GET['isnew'];	if($isnew === 'true'){		$_SESSION['search'] = array();		$_SESSION['startrow'] = 0;		$_SESSION['mode'] = 'title';		$_SESSION['rows'] = 44;	}else{		$_SESSION['rows'] = 44;	}	$startrow 		= $_SESSION['startrow'];	$rows 			= $_SESSION['rows'];	$searchArray 	= $_SESSION['search'];	//setup the needed arrays	$events 	= array();	$d 		= array();	$x 		= array();	$items 	= array();	//setup the solr options	$options = array(	    'hostname' => 'solr.showseeker.net',	    'port'     => 8983,	);	//set the basic solr info	$client 	= new SolrClient($options);	$query 	= new SolrQuery();	$query->setQuery('*:*');	//rows and start muner	$query->setStart($startrow);	$query->setRows($rows);	//grouping	$query->set("group", "true");	$query->set("group.field", "showid");	$query->set("group.ngroups", "true");	//remove uneeded data	$query->addFilterQuery('-genre1:consumer');	$query->addFilterQuery('-genre2:consumer');	$query->addFilterQuery('-sort:"Paid Programming"');	$query->addFilterQuery('-genre1:consumer');	$query->addFilterQuery('projected:0');	//networks	$networks = packageNetwork($con, $packageId);	$temp = "(".implode(' OR ', $networks['network']).")";	$query->addFilterQuery('stationnum:'.$temp);	//timezone items	$timezone = $networks['timezone'];	$tz_start = "tz_start_".$timezone;	$tz_end = "tz_end_".$timezone;	$day = "day_".$timezone;	$start = "start_".$timezone;	//date range	$sdate  = date("Y-m-d");	$edate  = date("Y-m-d",(strtotime($sdate." +2 weeks")));	$sdate .= "T00:00:00Z"; 	$edate .= "T23:59:59Z";	$query->addFilterQuery($tz_start . ':[' . $sdate . ' TO ' . $edate . ']');	//fields to include	$query  ->addField($tz_start)			->addField($tz_end)			->addField($day)			->addField($start)			->addField('id')			->addField('showid')			->addField('descembed')			->addField('genre')			->addField('stationname')			->addField('epititle')			->addField('live')			->addField('stationnum')			->addField('stars')			->addField('isnew')			->addField('tmsid')			->addField('stationnum')			->addField('title')			->addField('callsign')			->addField('new')			->addField('live')			->addField('stationname')			->addField('duration')			->addField('showtype')			->addField('premierefinale');	//sort the result	$query ->addSortField($tz_start, SolrQuery::ORDER_ASC);	//set all the available flags	$channel = array_search('channel', $keywords);	$channelshort = array_search('c', $keywords);	$movie = array_search('movie', $keywords);	$movieshort = array_search('m', $keywords);	$live = array_search('live', $keywords);	$liveshort = array_search('l', $keywords);	$sports = array_search('sports', $keywords);	$sportshort = array_search('s', $keywords);	$new = array_search('new', $keywords);	$newshort = array_search('n', $keywords);	$team = array_search('team', $keywords);	$teamshort = array_search('t', $keywords);	$premieres = premiere(&$events,&$keywords);	//sports event	//print strlen($movieshort);	/* PREMIERE */	if(count($premieres) > 0 && strlen($movieshort) == 0 && strlen($movie) == 0){		$temp = implode(' OR ', $premieres);		$query->addFilterQuery('premierefinale:('.$temp.')');	}	/* END PREMIERE */	/* TEAM */	if($team > -1){		unset($keywords[$team]);		array_push($events, "Team");		$query->addFilterQuery('genre1:"sports event"');	}	if($teamshort > -1){		unset($keywords[$teamshort]);		array_push($events, "Team");		$query->addFilterQuery('genre1:"sports event"');	}	/* END TEAM */	/* LIVE */	if($live > -1){		unset($keywords[$live]);		array_push($events, "Live");		$query->addFilterQuery('live:Live');	}	if($liveshort > -1){		unset($keywords[$liveshort]);		array_push($events, "Live");		$query->addFilterQuery('live:Live');	}	/* END LIVE */	/* SPORTS */	if($sports > -1){		unset($keywords[$sports]);		array_push($events, "Sports Events");		$query->addFilterQuery('genre1:"sports event"');	}	if($sportshort > -1){		unset($keywords[$sportshort]);		array_push($events, "Sports Events");		$query->addFilterQuery('genre1:"sports event"');	}	/* END SPORTS */	/* New */	if($new > -1){		unset($keywords[$new]);		array_push($events, "New");		$query->addFilterQuery('new:"New"');	}	if($newshort > -1){		unset($keywords[$newshort]);		array_push($events, "New");		$query->addFilterQuery('new:"New"');	}	/* END New */	/* Movie */	if($movie > -1){		unset($keywords[$movie]);		array_push($events, "Movies");		$query->addFilterQuery('showtype:"MV"');		if(count($premieres) > 0){			$a = array_search('Season Premiere', $events);			$b = array_search('Series Premiere', $events);			unset($events[$a]);			unset($events[$b]);			array_push($events, "Premiere");			$query->addFilterQuery('premierefinale:"Premiere"');		}	}	if($movieshort > -1){		unset($keywords[$movieshort]);		array_push($events, "Movies");		$query->addFilterQuery('showtype:"MV"');		if(count($premieres) > 0){			$a = array_search('Season Premiere', $events);			$b = array_search('Series Premiere', $events);			unset($events[$a]);			unset($events[$b]);			array_push($events, "Premiere");			$query->addFilterQuery('premierefinale:"Premiere"');		}	}	/* END Movie */	$words = implode(" ", $keywords);	//do the title search	if($_SESSION['mode'] == 'title' && count($keywords) > 0){		$data = searchTitle(&$client, &$query, $words);		$matches = $data->showid->ngroups;		$re = $data->showid->groups;		$count = count($re);		$items = array_merge($items, $re);		if($count <= $_SESSION['rows']){			$_SESSION['mode'] = 'keyword';			$_SESSION['startrow'] = 0;			$query->removeFilterQuery('title:"'.$words.'"');		}	}	//do the keyword search	if($_SESSION['mode'] == 'keyword' && count($keywords) > 0){		$data = searchKeyword(&$client, &$query, $keywords);		$matches = $data->showid->ngroups;		$re = $data->showid->groups;		$count = count($re);		$items = array_merge($items, $re);	}	if(count($keywords) == 0){		//run the query		$query_response = $client->query($query);		$response = $query_response->getResponse();		//do the first search for the titles		$data = $response->grouped;		$matches = $data->showid->ngroups;		$re = $data->showid->groups;		$count = count($re);		$items = array_merge($items, $re);	}	function searchTitle($client, $query, $words){		//filter the data based on the availble words		$query->addFilterQuery('title:"'.$words.'"');				//run the query		$query_response = $client->query($query);		$response = $query_response->getResponse();		//do the first search for the titles		$data = $response->grouped;			//return the event		return $data;	}	function searchKeyword($client, $query, $keywords){		//set the keywords as a string		$words = implode(" ", $keywords);		//filter the data based on the availble words		$query->addFilterQuery('search:('.urlencode($words).' OR '.urlencode($words).'*)');		//$query->addFilterQuery('search:'.urlencode($words).'*');		//$re.="search:(".$value."+OR+".$value."*)+";		//run the query		$query_response = $client->query($query);		$response = $query_response->getResponse();		//do the first search for the titles		$data = $response->grouped;			//return the event		return $data;	}	//mapped logo	$logomap = file_get_contents("https://managed.showseeker.com/services/1.0/logomap.php");	$logomap = json_decode($logomap);	//MODES	//1 image only	//2 title only	//3 epi title only	//4 epi and title	foreach($items as $show){		$mode = 1;		$img = file_get_contents('https://managed.showseeker.com/services/1.0/cover.php?showid='.$show->doclist->docs[0]->showid.'&width=240&height=360');		$img = json_decode($img);		$coveravail = true;		$title = $show->doclist->docs[0]->title;		if($img->cover == '0'){			$img->cover = 'https://showseeker.s3.amazonaws.com/on/default/default-240x360.png';			//https://showseeker.s3.amazonaws.com/on/100.png			$mode = 2;			$coveravail = false;		}				if($title == "College Basketball"){			$img->cover = 'https://showseeker.s3.amazonaws.com/on/default/default-240x360.png';			$mode = 3;		}				if($title == "NFL Football"){			$img->cover = "https://showseeker.s3.amazonaws.com/on/default/default-nfl-240x360.png";			$mode = 3;		}		if($title == "NBA Basketball"){			$img->cover = "https://showseeker.s3.amazonaws.com/on/default/default-nba-240x360.png";			$mode = 3;		}		if($title == "College Basketball" || $title == "Women's College Basketball"){			$img->cover = "https://showseeker.s3.amazonaws.com/on/default/default-basketball-240x360.png";			$mode = 3;		}		if($title == "NHL Hockey"){			$img->cover = "https://showseeker.s3.amazonaws.com/on/default/default-nhl-240x360.png";			$mode = 3;		}		$id = $show->doclist->docs[0]->id;		$descembed = $show->doclist->docs[0]->descembed;		$genre = $show->doclist->docs[0]->genre;		$epititle = $show->doclist->docs[0]->epititle;		$showid = $show->doclist->docs[0]->showid;		$live = $show->doclist->docs[0]->live;		$stationnum = $show->doclist->docs[0]->stationnum;		$networklogo = findNetworkLogo($logomap,$stationnum);		$numFound = $show->doclist->numFound;		$callsign = $show->doclist->docs[0]->callsign;		$channel = findChannelNo($networks,$stationnum);		$showtype = $show->doclist->docs[0]->showtype;		$channelType = findChannelType($networks,$stationnum);				$f = findInArray($showid,$searchArray);		array_push($x, $f);		if($f == 0){			array_push($searchArray, $showid);			$d[] = array("title"=>trim($title),"callsign"=>trim($callsign),"showtype"=>trim($showtype),"descembed"=>trim($descembed),"genre"=>trim($genre),"img"=>$img->cover,"epititle"=>trim($epititle),"live"=>$live, "displaymode"=>$mode, "showid"=>$showid, "id"=>$id, "stationnum"=>$stationnum, "networklogo"=>$networklogo, "channel"=>$channel, "channelType"=>$channelType, "numFound"=>$numFound);		}	}	$_SESSION['search'] = $searchArray;	$re = array(		"searchResult"=>$d,		"events"=>$events,		"keywords"=>$keywords,		"stype"=>$type,		"matches"=>$matches,		"mode"=>$_SESSION['mode'],		"startrow"=>$startrow,		"rows"=>$rows	);	//set the paging for the search session	if($isnew === 'true'){		$_SESSION['startrow'] = 45;	}else{		$_SESSION['startrow'] = $_SESSION['startrow'] + 44;	}	//return the json to the browser	print json_encode($re);	return;	//look to see if the show has been displayed to the user	function findInArray($showid,$searchArray){		$found = array_search($showid, $searchArray);		if($found > -1){			return 1;		}		return 0;	}	function premiere($events,$keywords){		$re = array();		$premiereLong = array_search('premiere', $keywords);		$premiereShort = array_search('p', $keywords);		$finaleLong = array_search('finale', $keywords);		$finaleShort = array_search('f', $keywords);		if($premiereLong > -1){			unset($keywords[$premiereLong]);			array_push($re, '"Season Premiere"', '"Series Premiere"');			array_push($events, "Season Premiere", "Series Premiere");		}		if($premiereShort > -1){			unset($keywords[$premiereShort]);			array_push($re, '"Season Premiere"', '"Series Premiere"');			array_push($events, "Season Premiere", "Series Premiere");		}		if($finaleLong > -1){			unset($keywords[$finaleLong]);			array_push($re, '"Season Finale"', '"Series Finale"');			array_push($events, "Season Finale", "Series Finale");		}		if($finaleShort > -1){			unset($keywords[$finaleShort]);			array_push($re, '"Season Finale"', '"Series Finale"');			array_push($events, "Season Finale", "Series Finale");		}		return $re;	}	function packageNetwork($con, $id){		mysqli_select_db($con,"Lineups");		$sql = "SELECT networks,timeZone FROM ProviderPackages WHERE id = $id";		$result = mysqli_query($con, $sql);		$row = $result->fetch_assoc();		$json = json_decode($row['networks']);		$timezone = $row['timeZone'];		foreach ($json as &$value) {			$channel[] = array('channelId'=>$value->channelId,'channelNo'=>$value->channelNo,'channelType'=>$value->channelType);			$network[] = $value->channelId;		}		$re = array('network'=>$network,'timezone'=>$timezone,'channel'=>$channel);		return $re;	}	function processGenres($genremap,$keywords){		$re = "";		foreach($keywords as $keyword){			$kw = array_search($keyword,$genremap);			if($kw > -1){				$re.='&fq=genre1:"'.$keyword.'"';				unset($keywords[$kw]);			}		}		return $re;	}	function findNetworkLogo($logomap,$stationnum){		foreach($logomap as $item){			if($item->networkid == $stationnum){				return "https://ww2.showseeker.com/images/_thumbnailsW/".$item->filename;			}		}		return 0;	}	function findStationFromChannel($networks,$stationnum){		$channel = $networks['channel'];		foreach($channel as $item){			if($item['channelNo'] == $stationnum){				return $item['channelId'];			}		}		return 0;	}	function findChannelNo($networks,$stationnum){		$channel = $networks['channel'];		foreach($channel as $item){			if($item['channelId'] == $stationnum){				return $item['channelNo'];			}		}		return 0;	}	function findChannelType($networks,$stationnum){		$channel = $networks['channel'];		foreach($channel as $item){			if($item['channelId'] == $stationnum){				return $item['channelType'];			}		}		return 'standard';	}	function buildKeyword($arr){		$re = "&fq=";		foreach ($arr as &$value) {			$re.="search:(".$value."+OR+".$value."*)+";		}		return $re;	}?>